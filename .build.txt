-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] use async_std :: net :: ToSocketAddrs ;
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] use async_std :: net :: ToSocketAddrs as
ToSocketAddrsAsync ;
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] use async_std :: net :: ToSocketAddrs ;
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] use std :: net :: ToSocketAddrs as ToSocketAddrsSync
;
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrs ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPortAsync
{
    type Inner : Sized + ToSocketAddrsAsync ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrs ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrsSync ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for
(Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for
(Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl < 's > ToSocketAddrsWithDefaultPortAsync for &
's [SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl < T : ToSocketAddrs + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl < T : ToSocketAddrsAsync + ? Sized >
ToSocketAddrsWithDefaultPortAsync for & T where T :
ToSocketAddrsWithDefaultPortAsync
{
    type Inner = < T as ToSocketAddrsWithDefaultPortAsync > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl < T : ToSocketAddrs + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl < T : ToSocketAddrsSync + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] use async_std :: net :: ToSocketAddrs ;
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] use async_std :: net :: ToSocketAddrs as
ToSocketAddrsAsync ;
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] use async_std :: net :: ToSocketAddrs ;
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] use std :: net :: ToSocketAddrs as ToSocketAddrsSync
;
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrs ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPortAsync
{
    type Inner : Sized + ToSocketAddrsAsync ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrs ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrsSync ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for
(Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for
(Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl < 's > ToSocketAddrsWithDefaultPortAsync for &
's [SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl < T : ToSocketAddrs + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl < T : ToSocketAddrsAsync + ? Sized >
ToSocketAddrsWithDefaultPortAsync for & T where T :
ToSocketAddrsWithDefaultPortAsync
{
    type Inner = < T as ToSocketAddrsWithDefaultPortAsync > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl < T : ToSocketAddrs + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl < T : ToSocketAddrsSync + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[maybe_async :: only_if(sync)] fn into_vec < A :
ToSocketAddrsWithDefaultPort > (addr : A, default_port : u16) -> Vec < String
>
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().unwrap().map(| a |
    a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[maybe_async :: remove(sync)] fn into_vec_async < A
: ToSocketAddrsWithDefaultPortAsync > (addr : A, default_port : u16) -> Vec <
String >
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().unwrap().map(| a |
    a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[maybe_async :: only_if(sync)] fn into_vec < A :
ToSocketAddrsWithDefaultPort > (addr : A, default_port : u16) -> Vec < String
>
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().unwrap().map(| a |
    a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[maybe_async :: noop(sync)] fn into_vec_sync < A :
ToSocketAddrsWithDefaultPort > (addr : A, default_port : u16) -> Vec < String
>
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().unwrap().map(| a |
    a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[maybe_async :: only_if(async)] async fn into_vec <
A : ToSocketAddrsWithDefaultPort > (addr : A, default_port : u16) -> Vec <
String >
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().await.unwrap().map(|
    a | a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[maybe_async :: noop(async)] async fn
into_vec_async < A : ToSocketAddrsWithDefaultPortAsync >
(addr : A, default_port : u16) -> Vec < String >
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().await.unwrap().map(|
    a | a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[maybe_async :: only_if(async)] async fn into_vec <
A : ToSocketAddrsWithDefaultPort > (addr : A, default_port : u16) -> Vec <
String >
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().await.unwrap().map(|
    a | a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[maybe_async :: remove(async)] fn into_vec_sync < A
: ToSocketAddrsWithDefaultPort > (addr : A, default_port : u16) -> Vec <
String >
{
    let mut v : Vec < String > =
    addr.with_default_port(default_port).to_socket_addrs().unwrap().map(| a |
    a.to_string()).collect() ; v.sort() ; v
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[test] #[serial] async fn ipv4()
{
    assert_eq! (into_vec("8.8.8.8", 443).await, ["8.8.8.8:443"]) ; assert_eq!
    (into_vec("8.8.8.8:8080", 443).await, ["8.8.8.8:8080"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[test] #[serial] fn ipv4_sync()
{
    assert_eq! (into_vec_sync("8.8.8.8", 443), ["8.8.8.8:443"]) ; assert_eq!
    (into_vec_sync("8.8.8.8:8080", 443), ["8.8.8.8:8080"]) ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] async fn
ipv4()
{
    assert_eq! (into_vec("8.8.8.8", 443).await, ["8.8.8.8:443"]) ; assert_eq!
    (into_vec("8.8.8.8:8080", 443).await, ["8.8.8.8:8080"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] async fn
ipv4_async()
{
    assert_eq! (into_vec_async("8.8.8.8", 443).await, ["8.8.8.8:443"]) ;
    assert_eq! (into_vec_async("8.8.8.8:8080", 443).await, ["8.8.8.8:8080"]) ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[test] #[serial] async fn ipv6()
{
    assert_eq! (into_vec("::1", 80).await, ["[::1]:80"]) ; assert_eq!
    (into_vec("[::1]", 80).await, ["[::1]:80"]) ; assert_eq!
    (into_vec("[::1]:31337", 80).await, ["[::1]:31337"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[test] #[serial] fn ipv6_sync()
{
    assert_eq! (into_vec_sync("::1", 80), ["[::1]:80"]) ; assert_eq!
    (into_vec_sync("[::1]", 80), ["[::1]:80"]) ; assert_eq!
    (into_vec_sync("[::1]:31337", 80), ["[::1]:31337"]) ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] async fn
ipv6()
{
    assert_eq! (into_vec("::1", 80).await, ["[::1]:80"]) ; assert_eq!
    (into_vec("[::1]", 80).await, ["[::1]:80"]) ; assert_eq!
    (into_vec("[::1]:31337", 80).await, ["[::1]:31337"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] async fn
ipv6_async()
{
    assert_eq! (into_vec_async("::1", 80).await, ["[::1]:80"]) ; assert_eq!
    (into_vec_async("[::1]", 80).await, ["[::1]:80"]) ; assert_eq!
    (into_vec_async("[::1]:31337", 80).await, ["[::1]:31337"]) ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[test] #[serial] async fn dns_ipv4()
{
    assert_eq!
    (into_vec("dns.google", 5353).await, ["8.8.4.4:5353", "8.8.8.8:5353"]) ;
    assert_eq!
    (into_vec("dns.quad9.net", 53).await,
    ["149.112.112.112:53", "9.9.9.9:53"]) ; assert_eq!
    (into_vec("dns11.quad9.net", 3389).await,
    ["149.112.112.11:3389", "9.9.9.11:3389"]) ; assert_eq!
    (into_vec("dns.google:53", 8080).await, ["8.8.4.4:53", "8.8.8.8:53"]) ;
    assert_eq!
    (into_vec("dns.quad9.net:80", 53).await,
    ["149.112.112.112:80", "9.9.9.9:80"]) ; assert_eq!
    (into_vec("dns11.quad9.net:21", 3389).await,
    ["149.112.112.11:21", "9.9.9.11:21"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[test] #[serial] fn dns_ipv4_sync()
{
    assert_eq!
    (into_vec_sync("dns.google", 5353), ["8.8.4.4:5353", "8.8.8.8:5353"]) ;
    assert_eq!
    (into_vec_sync("dns.quad9.net", 53), ["149.112.112.112:53", "9.9.9.9:53"])
    ; assert_eq!
    (into_vec_sync("dns11.quad9.net", 3389),
    ["149.112.112.11:3389", "9.9.9.11:3389"]) ; assert_eq!
    (into_vec_sync("dns.google:53", 8080), ["8.8.4.4:53", "8.8.8.8:53"]) ;
    assert_eq!
    (into_vec_sync("dns.quad9.net:80", 53),
    ["149.112.112.112:80", "9.9.9.9:80"]) ; assert_eq!
    (into_vec_sync("dns11.quad9.net:21", 3389),
    ["149.112.112.11:21", "9.9.9.11:21"]) ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] async fn
dns_ipv4()
{
    assert_eq!
    (into_vec("dns.google", 5353).await, ["8.8.4.4:5353", "8.8.8.8:5353"]) ;
    assert_eq!
    (into_vec("dns.quad9.net", 53).await,
    ["149.112.112.112:53", "9.9.9.9:53"]) ; assert_eq!
    (into_vec("dns11.quad9.net", 3389).await,
    ["149.112.112.11:3389", "9.9.9.11:3389"]) ; assert_eq!
    (into_vec("dns.google:53", 8080).await, ["8.8.4.4:53", "8.8.8.8:53"]) ;
    assert_eq!
    (into_vec("dns.quad9.net:80", 53).await,
    ["149.112.112.112:80", "9.9.9.9:80"]) ; assert_eq!
    (into_vec("dns11.quad9.net:21", 3389).await,
    ["149.112.112.11:21", "9.9.9.11:21"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] async fn
dns_ipv4_async()
{
    assert_eq!
    (into_vec_async("dns.google", 5353).await,
    ["8.8.4.4:5353", "8.8.8.8:5353"]) ; assert_eq!
    (into_vec_async("dns.quad9.net", 53).await,
    ["149.112.112.112:53", "9.9.9.9:53"]) ; assert_eq!
    (into_vec_async("dns11.quad9.net", 3389).await,
    ["149.112.112.11:3389", "9.9.9.11:3389"]) ; assert_eq!
    (into_vec_async("dns.google:53", 8080).await,
    ["8.8.4.4:53", "8.8.8.8:53"]) ; assert_eq!
    (into_vec_async("dns.quad9.net:80", 53).await,
    ["149.112.112.112:80", "9.9.9.9:80"]) ; assert_eq!
    (into_vec_async("dns11.quad9.net:21", 3389).await,
    ["149.112.112.11:21", "9.9.9.11:21"]) ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[test] #[serial] #[ignore] async fn dns_ipv6()
{
    assert_eq!
    (into_vec("dns64.dns.google", 53).await,
    ["[2001:4860:4860::6464]:53", "[2001:4860:4860::64]:53"]) ; assert_eq!
    (into_vec("dns64.dns.google:443", 53).await,
    ["[2001:4860:4860::6464]:443", "[2001:4860:4860::64]:443"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[test] #[serial] #[ignore] fn dns_ipv6_sync()
{
    assert_eq!
    (into_vec_sync("dns64.dns.google", 53),
    ["[2001:4860:4860::6464]:53", "[2001:4860:4860::64]:53"]) ; assert_eq!
    (into_vec_sync("dns64.dns.google:443", 53),
    ["[2001:4860:4860::6464]:443", "[2001:4860:4860::64]:443"]) ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] #[ignore]
async fn dns_ipv6()
{
    assert_eq!
    (into_vec("dns64.dns.google", 53).await,
    ["[2001:4860:4860::6464]:53", "[2001:4860:4860::64]:53"]) ; assert_eq!
    (into_vec("dns64.dns.google:443", 53).await,
    ["[2001:4860:4860::6464]:443", "[2001:4860:4860::64]:443"]) ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[async_attributes :: test] #[serial] #[ignore]
async fn dns_ipv6_async()
{
    assert_eq!
    (into_vec_async("dns64.dns.google", 53).await,
    ["[2001:4860:4860::6464]:53", "[2001:4860:4860::64]:53"]) ; assert_eq!
    (into_vec_async("dns64.dns.google:443", 53).await,
    ["[2001:4860:4860::6464]:443", "[2001:4860:4860::64]:443"]) ;
}
-^--------------------------------------------------------

running 8 tests
test test::dns_ipv6_async ... ignored
test test::dns_ipv6_sync ... ignored
test test::dns_ipv4_sync ... ok
test test::dns_ipv4_async ... ok
test test::ipv4_async ... ok
test test::ipv4_sync ... ok
test test::ipv6_async ... ok
test test::ipv6_sync ... ok

test result: ok. 6 passed; 0 failed; 2 ignored; 0 measured; 0 filtered out; finished in 0.59s

-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] use async_std :: net :: ToSocketAddrs ;
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] use async_std :: net :: ToSocketAddrs as
ToSocketAddrsAsync ;
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] use async_std :: net :: ToSocketAddrs ;
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] use std :: net :: ToSocketAddrs as ToSocketAddrsSync
;
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrs ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPortAsync
{
    type Inner : Sized + ToSocketAddrsAsync ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrs ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] #[doc = " A trait to use instead of ToSocketAddrs"]
pub trait ToSocketAddrsWithDefaultPort
{
    type Inner : Sized + ToSocketAddrsSync ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner ;
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddr
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV4
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for SocketAddrV6
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (IpAddr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for
(Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv4Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for
(Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for
(Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for (Ipv6Addr, u16)
{
    type Inner = Self ; fn with_default_port(& self, _default_port : u16) ->
    Self :: Inner { * self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for IpAddr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv4Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for Ipv6Addr
{
    type Inner = (Self, u16) ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* self, default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl < 's > ToSocketAddrsWithDefaultPortAsync for &
's [SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl < 's > ToSocketAddrsWithDefaultPort for & 's
[SocketAddr]
{
    type Inner = & 's [SocketAddr] ; fn
    with_default_port(& self, _default_port : u16) -> Self :: Inner { self }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl < T : ToSocketAddrs + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl < T : ToSocketAddrsAsync + ? Sized >
ToSocketAddrsWithDefaultPortAsync for & T where T :
ToSocketAddrsWithDefaultPortAsync
{
    type Inner = < T as ToSocketAddrsWithDefaultPortAsync > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl < T : ToSocketAddrs + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl < T : ToSocketAddrsSync + ? Sized >
ToSocketAddrsWithDefaultPort for & T where T : ToSocketAddrsWithDefaultPort
{
    type Inner = < T as ToSocketAddrsWithDefaultPort > :: Inner ; fn
    with_default_port(& self, default_port : u16) -> Self :: Inner
    { (* * self).with_default_port(default_port) }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for str
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToAsync
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "async")] impl ToSocketAddrsWithDefaultPortAsync for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
-v--------------------------------------------------------
convert in: 
convert_mode: ToSync
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------
convert in: 1
convert in: 2
convert in: 3
-v--------------------------------------------------------
convert out: 
#[cfg(feature = "sync")] impl ToSocketAddrsWithDefaultPort for String
{
    type Inner = String ; fn with_default_port(& self, default_port : u16) ->
    Self :: Inner
    {
        let inner = if let Some(pcolon) = self.rfind(":")
        {
            if let Some(pbracket) = self.rfind("]")
            {
                if pbracket < pcolon { self.to_string() } else
                { format! ("{}:{}", self, default_port) }
            } else
            {
                if let Some(_) = self [.. pcolon].rfind(":")
                { format! ("[{}]:{}", self, default_port) } else
                { self.to_string() }
            }
        } else { format! ("{}:{}", self, default_port) } ; inner
    }
}
-^--------------------------------------------------------

running 2 tests
test src\lib.rs - (line 20) ... ok
test src\lib.rs - (line 40) ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.74s

